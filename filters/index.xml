<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Filters on Advanced Forms for ACF</title><link>/filters/</link><description>Recent content in Filters on Advanced Forms for ACF</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/filters/index.xml" rel="self" type="application/rss+xml"/><item><title>af/field/before_render</title><link>/filters/af/field/before_render/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/field/before_render/</guid><description>Modify an ACF field before it&amp;rsquo;s rendered. Similar to acf/prepare_field.
&amp;lt;?php function modify_field( $field, $form, $args ) { $field[&amp;#39;label&amp;#39;] = &amp;#39;New field label&amp;#39;; return $field; } add_filter( &amp;#39;af/field/before_render/name=FIELD_NAME&amp;#39;, &amp;#39;modify_field&amp;#39;, 10, 3 ); Modifiers af/field/before_render Applies to all fields. af/field/before_render/name=FIELD_NAME Applies to fields with specific name. af/field/before_render/key=FIELD_KEY Applies to fields with specific key.</description></item><item><title>af/field/calculate_value</title><link>/filters/af/field/calculate_value/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/field/calculate_value/</guid><description>Provide your own value to be displayed in a calculated field. af_get_field can be used as normal but beware that no validation is performed on fields.
&amp;lt;?php function calculate_field_value( $value, $field, $form, $args ) { $quantity = af_get_field( &amp;#39;quantity&amp;#39; ); $price = 10; $total = $quantity * $price; return &amp;#39;$&amp;#39; . $total; } add_filter( &amp;#39;af/field/calculate_value/name=FIELD_NAME&amp;#39;, &amp;#39;calculate_field_value&amp;#39;, 10, 4 ); Modifiers af/field/calculate_value Applies to all fields. af/field/calculate_value/name=FIELD_NAME Applies to fields with specific name.</description></item><item><title>af/field/prefill_value</title><link>/filters/af/field/prefill_value/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/field/prefill_value/</guid><description>Prefill field values before displaying form. Can be used for example to provide dynamic default values.
&amp;lt;?php function prefill_form_field( $value, $field, $form, $args ) { return &amp;#39;Pre-filled value&amp;#39;; } add_filter( &amp;#39;af/field/prefill_value/key=FIELD_KEY&amp;#39;, &amp;#39;prefill_form_field&amp;#39;, 10, 4 ); Modifiers af/field/prefill_value Applies to all fields. af/field/prefill_value/name=FIELD_NAME Applies to fields with specific name. af/field/prefill_value/key=FIELD_KEY Applies to fields with specific key.</description></item><item><title>af/form/args</title><link>/filters/af/form/args/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/args/</guid><description>Alter the arguments used to display a form. The arguments are either passed to the function call or defined as attributes on a shortcode.
&amp;lt;?php function filter_args( $args, $form ) { $args[&amp;#39;submit_text&amp;#39;] = &amp;#39;Send&amp;#39;; return $args; } add_filter( &amp;#39;af/form/args/key=FORM_KEY&amp;#39;, &amp;#39;filter_args&amp;#39;, 10, 2 ); Modifiers af/form/args Applies to all forms. af/form/args/key=FORM_KEY Applies to forms with specific key. af/form/args/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/before_render</title><link>/filters/af/form/before_render/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/before_render/</guid><description>Make changes to a form before it&amp;rsquo;s rendered. Parameter $form is a form array.
Can be used for example to modify the form title, description, or success message.
&amp;lt;?php function filter_form( $form, $args ) { $form[&amp;#39;display&amp;#39;][&amp;#39;description&amp;#39;] = &amp;#39;New form description&amp;#39;; return $form; } add_filter( &amp;#39;af/form/before_render/key=FORM_KEY&amp;#39;, &amp;#39;filter_form&amp;#39;, 10, 2 ); Modifiers af/form/before_render Applies to all forms. af/form/before_render/key=FORM_KEY Applies to forms with specific key. af/form/before_render/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/button_attributes</title><link>/filters/af/form/button_attributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/button_attributes/</guid><description>Filter attributes on the submit button. Use to add classes, set an ID, or add new attributes.
$attributes is an array of HTML attributes and their values.
&amp;lt;?php function filter_submit_button_attributes( $attributes, $form, $args ) { $attributes[&amp;#39;class&amp;#39;] .= &amp;#39; button&amp;#39;; return $attributes; } add_filter( &amp;#39;af/form/button_attributes/key=FORM_KEY&amp;#39;, &amp;#39;filter_submit_button_attributes&amp;#39;, 10, 3 ); Modifiers af/form/button_attributes Applies to all forms. af/form/button_attributes/key=FORM_KEY Applies to forms with specific key. af/form/button_attributes/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/editing/post_data</title><link>/filters/af/form/editing/post_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/editing/post_data/</guid><description>Override the post data used when a post is created or updated. Post data is the $postarr argument passed to wp_insert_post.
&amp;lt;?php function modify_post_data( $post_data, $form, $args ) { // Override post title $post_data[&amp;#39;post_title&amp;#39;] = &amp;#39;New post title!&amp;#39;; return $post_data; } add_filter( &amp;#39;af/form/editing/post_data/key=FORM_KEY&amp;#39;, &amp;#39;modify_post_data&amp;#39;, 10, 3 ); Modifiers af/form/editing/post_data Applies to all forms. af/form/editing/post_data/key=FORM_KEY Applies to forms with specific key. af/form/editing/post_data/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/editing/user_data</title><link>/filters/af/form/editing/user_data/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/editing/user_data/</guid><description>Override the user data used when a user is created or updated. User data is the $userdata argument passed to wp_insert_user.
&amp;lt;?php function modify_user_data( $user_data, $form, $args ) { // Override user role $user_data[&amp;#39;user_role&amp;#39;] = &amp;#39;administrator&amp;#39;; return $user_data; } add_filter( &amp;#39;af/form/editing/user_data/key=FORM_KEY&amp;#39;, &amp;#39;modify_user_data&amp;#39;, 10, 3 ); Modifiers af/form/editing/user_data Applies to all forms. af/form/editing/user_data/key=FORM_KEY Applies to forms with specific key. af/form/editing/user_data/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/email/attachments</title><link>/filters/af/form/email/attachments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/email/attachments/</guid><description>Filter the attachments of a form email before sending. $attachments should be an array of file paths similar to the attachments parameter for wp_mail.
&amp;lt;?php function filter_email_attachments( $attachments, $email, $form, $fields ) { // Add a file as an attachment $attachments[] = &amp;#39;/path/to/file&amp;#39;; return $attachments; } add_filter( &amp;#39;af/form/email/attachments/key=FORM_KEY&amp;#39;, &amp;#39;filter_email_attachments&amp;#39;, 10, 4 ); Modifiers af/form/email/attachments Applies to all forms. af/form/email/attachments/key=FORM_KEY Applies to forms with specific key. af/form/email/attachments/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/email/content</title><link>/filters/af/form/email/content/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/email/content/</guid><description>Filter the contents of a form email before sending.
&amp;lt;?php function filter_email_content( $content, $email, $form, $fields ) { // Add some extra text to the end of the content $content .= &amp;#39; Some extra content&amp;#39;; return $content; } add_filter( &amp;#39;af/form/email/content/key=FORM_KEY&amp;#39;, &amp;#39;filter_email_content&amp;#39;, 10, 4 ); Modifiers af/form/email/content Applies to all forms. af/form/email/content/key=FORM_KEY Applies to forms with specific key. af/form/email/content/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/email/headers</title><link>/filters/af/form/email/headers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/email/headers/</guid><description>Filter the headers of a form email before sending. $headers should be an array of email headers.
&amp;lt;?php function filter_email_headers( $headers, $email, $form, $fields ) { // Set the reply-to address $headers[] = &amp;#39;Reply-To: john@doe.com&amp;#39;; return $headers; } add_filter( &amp;#39;af/form/email/headers/key=FORM_KEY&amp;#39;, &amp;#39;filter_email_headers&amp;#39;, 10, 4 ); Modifiers af/form/email/headers Applies to all forms. af/form/email/headers/key=FORM_KEY Applies to forms with specific key. af/form/email/headers/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/email/recipients</title><link>/filters/af/form/email/recipients/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/email/recipients/</guid><description>Filter the recipient of a form email before sending. Should be a comma-separated list of email addresses.
This filter can also be used to stop an email by returning false. In combination with af_get_field( 'FIELD_NAME' ) this can be used to conditionally send emails based on submitted values.
&amp;lt;?php function filter_email_recipient( $recipient, $email, $form, $fields ) { // Add another recipient to email $recipient .= &amp;#39;, john@doe.com&amp;#39;; return $recipient; } add_filter( &amp;#39;af/form/email/recipient/key=FORM_KEY&amp;#39;, &amp;#39;filter_email_recipient&amp;#39;, 10, 4 ); Modifiers af/form/email/recipients Applies to all forms.</description></item><item><title>af/form/email/styles</title><link>/filters/af/form/email/styles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/email/styles/</guid><description>Alter the CSS used for email notifications.
&amp;lt;?php function filter_email_styles( $styles, $email, $form ) { // Remove all default styles return &amp;#39;&amp;#39;; } add_filter( &amp;#39;af/form/email/styles/key=FORM_KEY&amp;#39;, &amp;#39;filter_email_styles&amp;#39;, 10, 3 ); Modifiers af/form/email/styles Applies to all forms. af/form/email/styles/key=FORM_KEY Applies to forms with specific key. af/form/email/styles/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/email/subject</title><link>/filters/af/form/email/subject/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/email/subject/</guid><description>Filter the subject line of a form email before sending.
&amp;lt;?php function filter_email_subject( $subject, $email, $form, $fields ) { // Alter the subject line $subject = &amp;#39;New subject&amp;#39;; return $subject; } add_filter( &amp;#39;af/form/email/subject/key=FORM_KEY&amp;#39;, &amp;#39;filter_email_subject&amp;#39;, 10, 4 ); Modifiers af/form/email/subject Applies to all forms. af/form/email/subject/key=FORM_KEY Applies to forms with specific key. af/form/email/subject/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/field_attributes</title><link>/filters/af/form/field_attributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/field_attributes/</guid><description>Filter attributes on field wrappers. Use to add classes, set an ID, or add new attributes.
$attributes is an array of HTML attributes and their values.
&amp;lt;?php function filter_field_attributes( $attributes, $field, $form, $args ) { $attributes[&amp;#39;id&amp;#39;] = &amp;#39;form-id&amp;#39;; return $attributes; } add_filter( &amp;#39;af/form/field_attributes/key=FORM_KEY&amp;#39;, &amp;#39;filter_field_attributes&amp;#39;, 10, 4 ); Modifiers af/form/field_attributes Applies to all forms. af/form/field_attributes/key=FORM_KEY Applies to forms with specific key. af/form/field_attributes/id=FORM_ID Applies to forms with specific post ID.</description></item><item><title>af/form/mailchimp/request</title><link>/filters/af/form/mailchimp/request/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/mailchimp/request/</guid><description>Change the Mailchimp API request before it&amp;rsquo;s sent. The request is for the &amp;ldquo;Add member to list&amp;rdquo; endpoint.
&amp;lt;?php function modify_mailchimp_request( $request, $form, $args ) { // The request body is JSON encoded so we must first decode it $body = json_decode( $request[&amp;#39;body&amp;#39;], true ); // Set custom merge tag named &amp;#34;NICKNAME&amp;#34; from &amp;#34;nickname&amp;#34; field $body[&amp;#39;merge_fields&amp;#39;][&amp;#39;NICKNAME&amp;#39;] = af_get_field( &amp;#39;nickname&amp;#39; ); // Re-encode the altered body as JSON $request[&amp;#39;body&amp;#39;] = json_encode( $body, JSON_FORCE_OBJECT ); return $request; } add_filter( &amp;#39;af/form/mailchimp/request/key=FORM_KEY&amp;#39;, &amp;#39;modify_mailchimp_request&amp;#39;, 10, 3 ); Modifiers af/form/mailchimp/request Applies to all forms.</description></item><item><title>af/form/next_button_atts</title><link>/filters/af/form/next_button_atts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/next_button_atts/</guid><description>Filter attributes on the next button in multi-page forms. Use to add classes, set an ID, or add new attributes.
$attributes is an array of HTML attributes and their values.
&amp;lt;?php function filter_next_button_attributes( $attributes, $field ) { $attributes[&amp;#39;class&amp;#39;] .= &amp;#39; button&amp;#39;; return $attributes; } add_filter( &amp;#39;af/form/next_button_atts&amp;#39;, &amp;#39;filter_next_button_attributes&amp;#39;, 10, 2 );</description></item><item><title>af/form/previous_button_atts</title><link>/filters/af/form/previous_button_atts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/previous_button_atts/</guid><description>Filter attributes on the previous button in multi-page forms. Use to add classes, set an ID, or add new attributes.
$attributes is an array of HTML attributes and their values.
&amp;lt;?php function filter_previous_button_attributes( $attributes, $field ) { $attributes[&amp;#39;class&amp;#39;] .= &amp;#39; button&amp;#39;; return $attributes; } add_filter( &amp;#39;af/form/previous_button_atts&amp;#39;, &amp;#39;filter_previous_button_attributes&amp;#39;, 10, 2 );</description></item><item><title>af/form/restriction</title><link>/filters/af/form/restriction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/filters/af/form/restriction/</guid><description>Restrict a form based on custom conditions. Return false to display form normally or return a message which should be displayed instead of the form fields.
The first conditional in the example should always be included in order to not override other restrictions
&amp;lt;?php function restrict_form( $restriction, $form, $args ) { // Added in case another restriction already applies if ( $restriction ) { return $restriction; } if ( condition_to_hide_form ) { return &amp;#39;This message will be displayed instead of the form&amp;#39;; } return false; } add_filter( &amp;#39;af/form/restriction/key=FORM_KEY&amp;#39;, &amp;#39;restrict_form&amp;#39;, 10, 3 ); Modifiers af/form/restriction Applies to all forms.</description></item></channel></rss>