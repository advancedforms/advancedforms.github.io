[{"type":"guides","title":"Creating a form","content":"Forms can be created either using the UI provided or programmatically.\nUsing the admin interface\nTo create a form using the UI navigate to the \"Forms\" admin page and create a new form. Use the form settings to set up entries, emails and display options. At the bottom you will find a list of all fields which are connected to your form.\nEditing a form using the admin interface https://advancedforms.github.io/assets/images/form-interface.png\nThe fields connected to a form are set up through Advanced Custom Fields allowing you to use the full range of field types offered by ACF. To connect a field group to your form set its location rule to match. This can be done in the ACF field group UI by adding a location rule and setting it to \"Form\" -> \"is equal to\" -> your form title.\nProgrammatically\nRegistering your forms programmatically is great if you want to integrate Advanced Forms with your theme or plugin. The plugin also has an export feature which will generate the registration code for you. This tools can be found by editing a form in the admin panel and then clicking the \"Export\" button.\nTo create a form programmatically the function af_register_form( $form ) is provided. We recommend using the form export feature to determine the structure of the $form array.\nNote that the only required attribute is key which should be a unique identifier for your form starting with \"form_\". Setting the title attribute is recommended.\n\nIt's recommended to register your forms on the af/register_forms hook to ensure that both Advanced Forms and ACF are installed and ready.\nIf you are adding ACF field groups programmatically using the function acf_add_local_field_group then you need to set your ACF location rule to match your registered form. Adding your form as a location rule is simple and can be done like this:\n\n","url":"/guides/basic/creating-a-form/"},{"type":"guides","title":"Customizing validations","content":"Validating individual fields\nAdvanced Forms uses ACF to render and validate fields. This means that any custom field validations will also work with your forms. ACF provides the acf/validate_value to add extra validation logic for specific fields and it's the recommended way to add validation logic for form fields as well. Refer to the ACF documentation (https://www.advancedcustomfields.com/resources/) for more info.\nValidating forms\nSometimes it's not sufficient to validate individual fields. From version 1.5 and onwards Advanced Forms includes the ability to add custom validation logic for full forms. This is made possible with the af/form/validate action combined with the af_add_error function. af/form/validate is invoked before submission and has access to the submitted data through af_get_field.\nThe following is an example of custom validation involving two separate fields. The af_add_error functions takes a field name (or key) as its first parameter and an error message as its second.\n\n","url":"/guides/advanced/customizing-validations/"},{"type":"guides","title":"Adding custom restrictions","content":"Advanced Forms comes with the option to hide a form unless certain conditions are meet. Included is the ability to limit the number of entries created by a form, to restrict a form from non-logged in users, and to set a schedule during which the form should be available.\nCustom restrictions may be applied using the filter af/form/restriction which is documented here (https://advancedforms.github.io/filters/forms/af-form-restriction). The following is an example of limiting a form to only administrators.\n\n","url":"/guides/advanced/adding-custom-restrictions/"},{"type":"guides","title":"Displaying a form","content":"Once a form has been added and fields have been assigned you can display the form either using a shortcode or with a function call.\nUsing shortcode\nTo display a form using a shortcode use the structure below.\n[advanced_form form=\"FORM_ID_OR_KEY\"]\nThe form can be specified either by its post ID or its form key but it's recommended to always use the form key. The form key can be found right below the title on the form edit page.\nUsing function call\nA form can also be displayed using a function call which specifies the form key or ID. The function call is shown below.\nadvanced_form( $form_id_or_key, $args );\nThe $args parameter allows you to tweak how the form is displayed. These settings can also be passed to the shortcode. The available settings and their defaults are as follows.\n\n","url":"/guides/basic/displaying-a-form/"},{"type":"guides","title":"Processing form submissions","content":"After a form has been submitted the field values need to be processed. The plugin comes with the ability to automatically save form data to entries and to send custom emails. Emails and entries can be configured in the form settings but are not enabled by default.\nIf you need to process the form data further the handy action hook af/form/submission should be used. To simplify the retrieval of field values a helper function af_get_field is provided which takes the field name/key to find. The function returns a processed value in the same format as ACF's get_field would.\nFollowing is an example of how to process a form submission and extract the value entered into the field with name email.\n\nThe $fields parameter has been deprecated and af_get_field should be used instead. It remains for backwards compatibility.\nUsing repeater fields\naf_get_field works with all ACF field types including repeaters. Let's say we have a repeater field called people containing two sub fields, first_name and last_name. The following code can be used to iterate over all the repeater rows and process them one by one.\n\n","url":"/guides/basic/processing-form-submissions/"},{"type":"guides","title":"Configuring a multi-page form","content":"From version 1.5 and onwards Advanced Forms supports multi-page forms. Setting them up is similar to configuring tabs in a regular ACF field group. To create a paged form simply insert \"Page\" fields to divide your form. The \"Page\" field has settings for numbering and button text as well. Only the settings on the first page field will be used.\nAfter setting up the page fields your form should now be split over multiple forms. Users can navigate the form by clicking the previous and next buttons as well as the progression indicator at the top. When navigating forward each page will be validated and any error messages will be displayed before progressing.\nMulti-page form https://advancedforms.github.io/assets/images/paged-form.png\n","url":"/guides/basic/making-a-multi-page-form/"},{"type":"guides","title":"Installing and activating","content":"Advanced Forms Pro can be purchased from hookturn.io here (https://hookturn.io/downloads/advanced-forms-pro/). After purchasing you will get get a license key as well as a download link to the plugin. The license key grants updates and support for one year.\nDownload the plugin zip file.\nInstall and activate using the downloaded file. If you have the free version installed, disable it before activating the Pro plugin.\nNavigate to \"Settings\" below \"Forms\".\nEnter your license key and click \"Update\". Make sure a message reading \"License valid and active\" is shown after saving.\nIf you have any issues, questions, or suggestions; contact us directly through https://hookturn.io/contact/ (https://hookturn.io/contact/). We are always happy to help!\n","url":"/pro/configuration/installing-and-activating/"},{"type":"guides","title":"Configuring Mailchimp","content":"Advanced Forms Pro enables you to connect forms to Mailchimp and subscribe your visitors to Mailchimp lists. Configuring Mailchimp is easy, all you need is an API key.\nGenerating an API Key\nStart by logging in to your Mailchimp account on mailchimp.com. Click your profile name in the top right corner and select Account. Navigate to API Keys under the Extras tab and press the Create a Key button. Lastly, copy the newly generated key.\n<iframe src=\"//fast.wistia.net/embed/iframe/0x8n36j330\" allowtransparency=\"true\" frameborder=\"0\" scrolling=\"no\" class=\"wistia_embed\" name=\"wistia_embed\" allowfullscreen=\"allowfullscreen\" mozallowfullscreen=\"mozallowfullscreen\" webkitallowfullscreen=\"webkitallowfullscreen\" oallowfullscreen=\"oallowfullscreen\" msallowfullscreen=\"msallowfullscreen\" width=\"600\" height=\"400\"></iframe>\n\nConnecting your form to Mailchimp\nOnce you have your API key it's time to configure Advanced Forms. Log in to the Wordpress admin panel and navigate to Forms â†’ Settings. Paste your API key in the Mailchimp API key and save. Advanced Forms is now connected to your Mailchimp account and ready to start adding some subscribers.\nFind and edit the form you want to connect. Navigate to the Integrations tab and enable the Mailchimp integration. You should now be faced with a few settings. The list field lets you configure which Mailchimp list to subscribe users to and the email field lets you select which form field to get an email address from. Remember that this needs to be a valid email address and hence it's recommended to use an ACF email field. Optionally you may also configure first name and last name to make your subscriber info more complete.\nMailchimp form settings https://advancedforms.github.io/assets/images/mailchimp-settings.png\n","url":"/pro/integrations/configuring-mailchimp/"},{"type":"guides","title":"Connecting to Zapier","content":"With the help of Zapier (https://zapier.com) you can connect your form to thousand of services and create automated workflows. You could create a form that accepts files from users and automatically uploads them to your Dropbox. Or you could automatically save form submissions to a Google Spreadsheet. There are literally thousands of possibilities.\nCreating a Zap\nSet up a form with all the fields you want to pass on to Zapier.\nFollow this link (https://zapier.com/developer/invite/66711/01f290c023c6caeb5201b57663c0af01/) to create a new Zap for your form.\nChoose the \"New Submission\" trigger and continue.\nCopy the provided URL,  and jump over to your form in the Wordpress admin.\nUnder \"Integrations\", enable the Zapier integration and the paste the URL from step 5. Finishing by clicking the \"Send test submission\" button.\nHop back to Zapier and continue with the Zap creation process. Zapier should pick up some sample data with your form fields within a few seconds.\nComplete your Zap by connecting it to an action!\n","url":"/pro/integrations/connecting-zapier/"},{"type":"guides","title":"Setting up Slack notifications","content":"By connecting your Slack workspace to a form you will instantly get a message whenever a visitor sends a submission. A perfect way to be notified whether you're creating a simple contact form or building a full-blown helpdesk.\nCreating a webhook\nAll you need to connect your form to Slack is a single URL called a webhook. Here's how you get one:\nNavigate to my.slack.com/services/new/incoming-webhook/ (https://my.slack.com/services/new/incoming-webhook/) and make sure you are logged in to your Slack workspace.\nSelect the channel you want notifications to be sent to and click Add Incoming WebHooks integration.\nCopy your fresh webhook URL.\nConfiguring your form\nOnce a webhook has been generated you're ready to set up your form. In the Wordpress admin find your form, edit it, and enable the Slack integration under Integrations. Fill in your webhook URL and type a little message which will be included with each notification. Also select any fields which you would like included. That's it!\nExample of a Slack notification https://advancedforms.github.io/assets/images/slack-notification.png\n","url":"/pro/integrations/setting-up-slack-notifications/"},{"type":"guides","title":"Creating and editing posts","content":"A common use case for front-end forms is allowing users to create and edit posts. Maybe you want to let users submit post drafts which administrators can review and publish. Or have a post type for support issues which customers can submit and edit. Advanced Forms Pro makes it dead-simple to make forms which create and edit posts.\nConfiguring your form\nGo to the Wordpress admin and edit the form which you want to configure. Under \"Editing\", select \"Posts\" and you should be presented with a wide array of settings.\nThe \"Post type\" setting specifies which post type new posts will have. When editing a post instead the post type setting will be ignored. For the post title and content it's possible to either select a field from which to retrieve a value or use a more complex, custom format. A custom format won't work with post editing and should only be used for creating new posts.\nThere is also a setting for \"Custom fields\" which allows you to map fields from a form to a post. This enables you to create an ACF field group which is shared between a form and a post type. The selected fields will the automatically be mapped without any code.\nExample form configuration https://advancedforms.github.io/assets/images/editing-post-settings.png\nDisplaying your form\nIf editing has been configured for a form you will also need to specify whether to create a new post or edit an existing one. If you want to create a new post you don't have to anything in particular. If you want to edit a post though you need to pass a post ID with the form argument post. The current post can be edited by using current instead.\nCreate a new post:\n[advanced_form form=\"form_key\"]\nEdit a post with a specific ID:\n[advanced_form form=\"form_key\" post=\"1\"]\nEdit the currently displayed post:\n[advanced_form form=\"form_key\" post=\"current\"]\nOf course it's also possible to pass these arguments when using a function call:\nadvanced_form( 'form_key', array( 'post' => 1 ) );\nCreating posts as draft\nBy default posts will be created with a status of published. This might not always be desirable if the posts first needs to be reviewed. The following code snippet can be used to create posts as drafts by default. Remember to replace FORM_KEY with your actual form key.\n\nSetting the post thumbnail\nThe post thumbnail (also called featured image) can be set from a field using the af/form/editing/post_created action. Make sure your image field is configured to return an attachment ID.\n\nRedirecting to post after creation\nTo redirect to a post after creation it's recommended to use af/form/submission with a high priority instead of af/form/editing/post_created. Otherwise there is a risk of stopping emails from being sent and integrations from working. The created post ID can be accessed by using AF()->submission['post'].\n\n","url":"/pro/editing/creating-and-editing-posts/"},{"type":"guides","title":"Creating and editing users","content":"A common use case for front-end forms is allowing visitors to create and edit users. Maybe you want to let users upload a picture gallery to their own profile. Or you want a sign up form where users can provide extra information which is saved as fields on their profiles. Advanced Forms Pro makes user creation and editing super easy to setup.\nConfiguring your form\nGo to the Wordpress admin and edit the form which you want to configure. Under \"Editing\", select \"Users\" and you should be presented with a wide array of settings.\nThe first setting is for user role which will only be used for new users. The rest specify how to map between form fields and user fields. For the field mappings you can either chose a field to retrieve values from or a custom format. The custom format will only work for new users. If the \"Send notification\" setting is enabled, created users will receive the standard Wordpress email with a password-reset link.\nThere is also a setting for \"Custom fields\" which allows you to map fields from a form to a user.\nThis will only work if the same ACF field group is used both for the form and user profiles.\nExample form configuration https://advancedforms.github.io/assets/images/editing-user-settings.png\nDisplaying your form\nIf editing has been configured for a form you will also need to specify whether to create a new user or edit an existing one. If you want to edit a user you need to pass a user ID with the form argument user. For creating a user, the form argument user should be set to new. The current user can be edited by using current. With a shortcode this would look like\n[advanced_form form=\"form_key\" user=\"new\"]\n[advanced_form form=\"form_key\" user=\"1\"]\n[advanced_form form=\"form_key\" user=\"current\"]\nAnd the function call equivalent is\nadvanced_form( 'form_key', array( 'user' => 1 ) );\nSign in user after registration\nIf you want users to be automatically signed in after registering you can use the following snippet.\n\n","url":"/pro/editing/creating-and-editing-users/"},{"type":"guides","title":"Using calculated fields","content":"Calculated fields are updated live when a form is filled out and can contain any content you'd like to. They are perfect for providing previews or to show calculated values before submission.\nAdding a calculated field\nCalculated fields are just regular ACF fields. Go to your field group and add a new field of type \"Calculated\". Next we need to configure what value this field should display which is done in the form settings. Head on over to your form settings and switch to the \"Calculated\" tab.\nUnder the \"Calculated\" tab you will find a WYSIWYG editor for each calculated field. You can add regular content and mix in field values which will be updated in real-time, similar to how field values can be included in email notifications and success messages. Mathematical arithmetic, such as addition, is not currently supported through the admin interface but can easily be achieved with a little bit of code. Read the next section for an example on how this can be done.\nCustomizing calculated value\nCalculated fields are not limited to static content with mixed in fields but also support using code to define more complex calculations, for example arithmetic. Use the af/field/calculate_value filter to provide your own calculation logic.\nBelow is an example of a calculated field which display the sum of two other fields in the form called number_field_1 and number_field_2. Replace FIELD_NAME in the example below with the name of your calculated field.\n\nExtending calculated fields with Javascript\nUsing the ACF Javascript API the behaviour of calculated fields can be customized. The af/field/calculated/value_updated action is triggered when a calculated field is updated and can be used when you want use the calculated value for something more than just the field.\n\nIf you want to cause an update of a calculated field you can use trigger the af/field/calculated/update_value. This is convenient for example when you want to update a calculated field when the user interacts with something outside the form.\n\n","url":"/pro/configuration/using-calculated-fields/"},{"type":"guides","title":"Adding custom merge tags","content":"Advanced Forms has a variety of built-in merge tags which can be used in success messages, emails, and calculated fields. Examples include {field:NAME} and {entry_id}. Sometimes it's desirable to add custom merge tags which we'll cover in this guide.\nTo add merge tags we use the af/merge_tags/resolve filter. This filter will be invoked for every merge tag, that is all occurences of two braces ({}) with content in between. Because the filter is invoked for every merge tag we first need to check that we're targeting the right tag.\nThe following snippet adds a new merge tag {hello} which will be replaced with the text \"Hello\" followed by the submitted value for a field named first_name.\n\nAdding merge tags to the UI\nWhen editing success messages and emails there is a dropdown which can be used to insert merge tags without having to remember their syntax. Using the af/merge_tags/custom it's possible to add custom merge tags to this dropdown. Here's an example of adding the previously created {hello} tag:\n\n","url":"/guides/advanced/adding-custom-merge-tags/"},{"type":"guides","title":"Decreasing number of scripts and styles","content":"Advanced Custom Fields has the unfortunate habit of enqueuing scripts and styles for all field types even when not in use. As a result there are normally scripts and styles included when displaying a form which are not actually in use.\nIt's possible to manually dequeue unecessary resources with a bit of care. The following snippet can be used to dequeue some things which are included by ACF. The comments explain which field types use which enqueues. If you're actually using one of the field types please remove the corresponding dequeue.\n\nIn the future Advanced Forms will be able to automatically dequeue unused resources. Until then it's recommended to use this snippet and manually determine which enqueues are unnecessary.\n","url":"/guides/advanced/decreasing-scripts-and-styles/"},{"type":"guides","title":"Customizing the form template","content":"This guide is intended to give an overview of what the markup for a form looks like and what options are available to customize it. The visualization below shows the different HTML elements that make up a form, classes that can be used to style them and hooks that might be useful.\nSome customization can be achieved with the form arguments (/guides/basic/displaying-a-form/), for example changing the submit button text. If you want to programmatically change the arguments then use the af/form/args (/filters/af-form-args) filter.\n<div class=\"form-template-visual section\">\n  <div class=\"section\">\n    <div class=\"action\">\n      <p class=\"text\"><a href=\"/actions/af-form-before_title\">af/form/before_title</a></p>\n    </div>\n    <div class=\"section alternate no-children\">\n      <div class=\"element-description\">af-title</div>\n      <p class=\"text with-description\">Title</p>\n      <p class=\"description\">Only shown if argument <code>display_title</code> is true</p>\n    </div>\n    <div class=\"section alternate no-children\">\n      <div class=\"element-description\">af-description</div>\n      <p class=\"text with-description\">Description</p>\n      <p class=\"description\">Only shown if argument <code>display_description</code> is true</p>\n    </div>\n    <div class=\"section alternate\">\n      <div class=\"element-description\">af-fields acf-fields acf-form-fields</div>\n      <div class=\"action\">\n        <p class=\"text\"><a href=\"/actions/af-form-before_fields\">af/form/before_fields</a></p>\n      </div>\n      <!--<div class=\"action\">\n        <p class=\"text\">af/field/before_field</p>\n        <p class=\"description\">Triggered before each field</p>\n      </div>-->\n      <div class=\"section\">\n        <div class=\"element-description\">\n          af-field af-field-{NAME} af-field-type-{TYPE}\n        </div>\n        <div class=\"filter\">\n          <p class=\"text\"><a href=\"/filters/af-form-field_attributes\">af/form/field_attributes</a></p>\n        </div>\n        <div class=\"section alternate no-children\">\n          <div class=\"element-description\">af-label</div>\n          <p class=\"text\">Label</p>\n          <div class=\"section top-margin alternate no-children\">\n            <div class=\"element-description\">af-field-instructions</div>\n            <p class=\"text\">Instructions</p>\n            <p class=\"description\">Can be moved after the field by setting the <code>instruction_placement</code> argument or using the <code>af/field/instructions_placement</code> filter</p>\n          </div>\n        </div>\n        <div class=\"section alternate no-children\">\n          <div class=\"element-description\">af-input</div>\n          <p class=\"text\">Rendered by ACF</p>\n          <p class=\"description\">Refer to the <a href=\"https://www.advancedcustomfields.com/resources/\">ACF documentation</a> for information on how to customize fields. The <a href=\"/filters/af-field-before_render\">af/field/before_render</a> filter can be used to alter the field object before it's rendered by ACF.</p>\n        </div>\n      </div>\n      <!--<div class=\"action\">\n        <p class=\"text\">af/field/after_field</p>\n        <p class=\"description\">Triggered after each field</p>\n      </div>-->\n      <div class=\"action\">\n        <p class=\"text\"><a href=\"/actions/af-form-after_fields\">af/form/after_fields</a></p>\n      </div>\n      <div class=\"section\">\n        <div class=\"element-description\">af-submit</div>\n        <div class=\"section alternate no-children\">\n          <div class=\"element-description\">af-submit-button</div>\n          <p class=\"text with-description\">Submit button</p>\n          <p class=\"description\">Button text can be changed using the <code>submit_text</code> argument</p>\n          <div class=\"filter top-margin\">\n            <p class=\"text\"><a href=\"/filters/af-form-button_attributes\">af/form/button_attributes</a></p>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","url":"/guides/advanced/customizing-form-template/"},{"type":"actions","title":"af/form/before_title","content":"Triggered at the beginning of a form, before the title.\n\n","url":"/actions/af-form-before_title/"},{"type":"actions","title":"af/form/before_fields","content":"Triggered right before the fields and after the description.\n\n","url":"/actions/af-form-before_fields/"},{"type":"actions","title":"af/form/hidden_fields","content":"Use this action to add hidden inputs which can contain data you want to pass along your form, for example the current post title as shown in the example below.\nThe hidden fields will be available in all submission hooks, such as af/form/submission, and can be accessed through the $_POST object. Please keep in mind that hidden inputs are not ACF fields and won't be saved automatically to entries or posts.\n\n","url":"/actions/af-form-hidden_fields/"},{"type":"actions","title":"af/form/after_fields","content":"Triggered after the submit button.\n\n","url":"/actions/af-form-after_fields/"},{"type":"actions","title":"af/email/after_send","content":"Triggered after an email has been sent.\n\n","url":"/actions/af-email-after_send/"},{"type":"actions","title":"af/email/before_send","content":"Triggered before an email is sent.\n\n","url":"/actions/af-email-before_send/"},{"type":"actions","title":"af/form/editing/post_created","content":"Triggered after a post has been created. Not triggered when a post is edited.\n\n","url":"/actions/af-form-editing-post_created/"},{"type":"actions","title":"af/form/editing/post_updated","content":"Triggered after a post has been edited. Not triggered when a post is created.\n\n","url":"/actions/af-form-editing-post_updated/"},{"type":"actions","title":"af/form/editing/user_created","content":"Triggered after a user has been created. Not triggered when a user is edited.\n\n","url":"/actions/af-form-editing-user_created/"},{"type":"actions","title":"af/form/editing/user_updated","content":"Triggered after a user has been edited. Not triggered when a user is created.\n\n","url":"/actions/af-form-editing-user_updated/"},{"type":"actions","title":"af/form/entry_created","content":"Triggered after an entry has been created\n\n","url":"/actions/af-form-entry_created/"},{"type":"actions","title":"af/form/validate","content":"Triggered before a form is submitted, giving a chance to perform extra validation. Validation errors should be added using af_add_error( $field_name_or_key, $message ).\n\n","url":"/actions/af-form-validate/"},{"type":"actions","title":"af/field/calculated/update_value","content":"This Javascript action will be triggered when a calculated field has been updated with a new value.\n\n","url":"/actions/js-af-field-calculated-update_value/"},{"type":"actions","title":"af/form/page_changed","content":"This Javascript action will be triggered when the current page is changed in a multi-page form.\n\n","url":"/actions/js-af-form-page_changed/"},{"type":"filters","title":"af/form/before_render","content":"Make changes to a form before it's rendered. Parameter $form is a form array.\nCan be used for example to modify the form title, description, or success message.\n\n","url":"/filters/af-form-before_render/"},{"type":"filters","title":"af/form/email/recipient","content":"Filter the recipient of a form email before sending. Should be a comma-separated list of email addresses.\nThis filter can also be used to stop an email by returning false. In combination with af_get_field( 'FIELD_NAME' ) this can be used to conditionally send emails based on submitted values.\n\n","url":"/filters/af-form-email-recipient/"},{"type":"filters","title":"af/form/args","content":"Alter the arguments used to display a form. The arguments are either passed to the function call or defined as attributes on a shortcode.\n\n","url":"/filters/af-form-args/"},{"type":"filters","title":"af/form/email/subject","content":"Filter the subect line of a form email before sending.\n\n","url":"/filters/af-form-email-subject/"},{"type":"filters","title":"af/form/email/content","content":"Filter the contents of a form email before sending.\n\n","url":"/filters/af-form-email-content/"},{"type":"filters","title":"af/form/restriction","content":"Restrict a form based on custom conditions. Return false to display form normally or return a message which should be displayed instead of the form fields.\nThe first conditional in the example should always be included in order to not override other restrictions.\n\n","url":"/filters/af-form-restriction/"},{"type":"filters","title":"af/form/email/headers","content":"Filter the headers of a form email before sending. $headers should be an array of email headers.\n\n","url":"/filters/af-form-email-headers/"},{"type":"filters","title":"af/form/field_attributes","content":"Filter attributes on field wrappers. Use to add classes, set an ID, or add new attributes.\n$attributes is an array of HTML attributes and their values.\n\n","url":"/filters/af-form-field_attributes/"},{"type":"filters","title":"af/form/email/attachments","content":"Filter the attachments of a form email before sending. $attachments should be an array of file paths similar to the attachments parameter for wp_mail.\n\n","url":"/filters/af-form-email-attachments/"},{"type":"filters","title":"af/form/button_attributes","content":"Filter attributes on the submit button. Use to add classes, set an ID, or add new attributes.\n$attributes is an array of HTML attributes and their values.\n\n","url":"/filters/af-form-button_attributes/"},{"type":"filters","title":"af/form/previous_button_atts","content":"Filter attributes on the previous button in multi-page forms. Use to add classes, set an ID, or add new attributes.\n$attributes is an array of HTML attributes and their values.\n\n","url":"/filters/af-form-previous_button_atts/"},{"type":"filters","title":"af/form/next_button_atts","content":"Filter attributes on the next button in multi-page forms. Use to add classes, set an ID, or add new attributes.\n$attributes is an array of HTML attributes and their values.\n\n","url":"/filters/af-form-next_button_atts/"},{"type":"filters","title":"af/field/prefill_value","content":"Prefill field values before displaying form. Can be used for example to provide dynamic default values.\n\n","url":"/filters/af-field-prefill_value/"},{"type":"filters","title":"af/field/calculate_value","content":"Provide your own value to be displayed in a calculated field. af_get_field can be used as normal but beware that no validation is performed on fields.\n\n","url":"/filters/af-field-calculate_value/"},{"type":"filters","title":"af/field/before_render","content":"Modify an ACF field before it's rendered. Similar to acf/prepare_field.\n\n","url":"/filters/af-field-before_render/"},{"type":"filters","title":"af/form/editing/post_data","content":"Override the post data used when a post is created or updated. Post data is the $postarr argument passed to wp_insert_post (https://developer.wordpress.org/reference/functions/wp_insert_post/).\n\n","url":"/filters/af-form-editing-post-data/"},{"type":"filters","title":"af/form/editing/user_data","content":"Override the user data used when a user is created or updated. User data is the $userdata argument passed to wp_insert_user (https://developer.wordpress.org/reference/functions/wp_insert_user/).\n\n","url":"/filters/af-form-editing-user-data/"}]