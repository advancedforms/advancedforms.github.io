<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>guides advanced on Advanced Forms for ACF</title><link>/categories/guides-advanced/</link><description>Recent content in guides advanced on Advanced Forms for ACF</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/categories/guides-advanced/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding custom merge tags</title><link>/guides/adding-custom-merge-tags/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/adding-custom-merge-tags/</guid><description>Advanced Forms has a variety of built-in merge tags which can be used in success messages, emails, and calculated fields. Examples include {field:NAME} and {entry_id}. Sometimes it&amp;rsquo;s desirable to add custom merge tags which we&amp;rsquo;ll cover in this guide.
Registering a new merge tag To add merge tags we use the af/merge_tags/resolve filter. This filter will be invoked for every merge tag, that is all occurences of two braces ({}) with content in between.</description></item><item><title>Adding custom restrictions</title><link>/guides/adding-custom-restrictions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/adding-custom-restrictions/</guid><description>Advanced Forms comes with the option to hide a form unless certain conditions are meet. Included is the ability to limit the number of entries created by a form, to restrict a form from non-logged in users, and to set a schedule during which the form should be available.
Custom restrictions may be applied using the filter af/form/restriction which is documented here. The following is an example of limiting a form to only administrators.</description></item><item><title>Customizing the form template</title><link>/guides/customizing-the-form-template/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/customizing-the-form-template/</guid><description>This guide is intended to give an overview of what the markup for a form looks like and what options are available to customize it. The visualization below shows the different HTML elements that make up a form, classes that can be used to style them and hooks that might be useful.
Some customization can be achieved with the form arguments, for example changing the submit button text. If you want to programmatically change the arguments then use the af/form/args filter.</description></item><item><title>Customizing validations</title><link>/guides/customizing-validations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/customizing-validations/</guid><description>Validating individual fields Advanced Forms uses ACF to render and validate fields. This means that any custom field validations will also work with your forms. ACF provides the acf/validate_value to add extra validation logic for specific fields and it&amp;rsquo;s the recommended way to add validation logic for form fields as well. Refer to the ACF documentation for more info.
Validating forms Sometimes it&amp;rsquo;s not sufficient to validate individual fields. From version 1.</description></item><item><title>Decreasing number of scripts and styles</title><link>/guides/decreasing-number-of-scripts-and-styles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/guides/decreasing-number-of-scripts-and-styles/</guid><description>Advanced Custom Fields has the unfortunate habit of enqueuing scripts and styles for all field types even when not in use. As a result there are normally scripts and styles included when displaying a form which are not actually in use.
It&amp;rsquo;s possible to manually dequeue unecessary resources with a bit of care. The following snippet can be used to dequeue some things which are included by ACF. The comments explain which field types use which enqueues.</description></item></channel></rss>